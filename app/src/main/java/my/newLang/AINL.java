/* Generated By:JavaCC: Do not edit this line. AINL.java */
package my.newLang;

import android.content.Context;
import my.Extras.setConvertInterface;
import my.nodes.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;

public class AINL implements AINLConstants {
  static HashMap< String,FunctionNode> functionTabel=new HashMap();
  public static Context android_context;
  static boolean first_run=true;
  public static void main(FileInputStream file , Context context) throws ParseException,FileNotFoundException
  {

      android_context=context;
  if(first_run){
      AINL parser=new AINL(file);
      first_run=false;
  }else{
      ReInit(file);
  }

   Node n = start();
   n.execute(new context());
 }
    public static String convert(FileInputStream file) throws ParseException,FileNotFoundException
    {

        if(first_run){
            AINL parser=new AINL(file);
            first_run=false;
        }else{
            ReInit(file);
        }
        Node n = start();
       String c=(String)n.compile(new context());

       return c;
    }
  static final public BlockNode start() throws ParseException {
  Node n;
  BlockNode res=new BlockNode();
    label_1:
    while (true) {
      n = statment();
                      res.addChildren(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case READ:
      case WRITE:
      case IF:
      case FOR:
      case FUNC:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public DiffineVar diffineVar() throws ParseException {
        DiffineVar res=new DiffineVar();
        Token t,t1;
    jj_consume_token(DEF);
    t = jj_consume_token(ID);
    jj_consume_token(COLON);
    t1 = jj_consume_token(KEY);
    jj_consume_token(SIMCOL);
    res.setName(t.image);
    res.setType(t1.image);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public Expreation E() throws ParseException {
  Token t=null;
  Expreation n1,n2=null;
    n1 = F();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      n2 = E();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
          if(t==null) {
           {if (true) return n1;}
           }
           else {
             Expreation res=new Expreation();
             res.addChildren(n1);
             res.addChildren(n2);
             res.setOperator(t.image);
             {if (true) return res;}
           }
    throw new Error("Missing return statement in function");
  }

  static final public Expreation F() throws ParseException {
  Token t=null;
  Expreation n1,n2=null;
    n1 = N();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      t = jj_consume_token(MULTIPLY);
      n2 = F();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
          if(t==null) {
           {if (true) return n1;}
           }
           else {
             Expreation res=new Expreation();
             res.addChildren(n1);
             res.addChildren(n2);
             res.setOperator(t.image);
             {if (true) return res;}
           }
    throw new Error("Missing return statement in function");
  }

  static final public Expreation N() throws ParseException {
  Token t1=null,t2=null,t3=null;
  Expreation n=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t1 = jj_consume_token(NUM);
      break;
    case LP:
      jj_consume_token(LP);
      n = E();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(2)) {
        n = prototibe();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t2 = jj_consume_token(ID);
          break;
        case COUT:
          jj_consume_token(COUT);
          t3 = jj_consume_token(ID);
          jj_consume_token(COUT);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if(t1!=null) {
      Constant cn=new Constant();
                //if(t1.image.contains("."))
                        cn.setValue(Double.parseDouble(t1.image));
                //else
                        //cn.setValue(Integer.parseInt(t1.image));
      {if (true) return cn;}
    }

    else if(n!=null) {
                {if (true) return n;}
    }
    else if(t2!=null){
        Var vn=new Var();
        vn.setVar(t2.image);
        {if (true) return vn;}
    }else {
      Constant sn=new Constant();
      sn.setValue(t3.image);
      {if (true) return sn;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public assigNode assign() throws ParseException {
Token t;
assigNode res=new assigNode();
Node enode;
    t = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    enode = E();
    jj_consume_token(SIMCOL);
        res.setVarName(t.image);
        res.addChildren(enode);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public IF if_statment() throws ParseException {
        IF res=new IF();
        Node n,nn;
        BlockNode cn=new BlockNode();
        BlockNode en=null;
    jj_consume_token(IF);
    jj_consume_token(LP);
    n = fullcondation();
    jj_consume_token(RP);
    label_2:
    while (true) {
      nn = statment();
                                                    cn.addChildren(nn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case READ:
      case WRITE:
      case IF:
      case FOR:
      case FUNC:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
                                                                                      en= new BlockNode();
      label_3:
      while (true) {
        nn = statment();
                                                                                                                               en.addChildren(nn);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEF:
        case READ:
        case WRITE:
        case IF:
        case FOR:
        case FUNC:
        case WHILE:
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(END);
                res.addChildren(n);
                res.addChildren(cn);
                if(en!=null)
                        res.addChildren(en);
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public fullCondation fullcondation() throws ParseException {
   Token t=null;
   condationNode n=new condationNode();
   Node nn=null;
   fullCondation res=new fullCondation();
    n = condation();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGICCOMPR:
      t = jj_consume_token(LOGICCOMPR);
      nn = fullcondation();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
   res.addChildren(n);
   if(t!=null) {
     res.setOperator(t.image);
     res.addChildren(nn);
   }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public condationNode condation() throws ParseException {
 condationNode res=new condationNode();
 Node n;
 Node nn;
 Token t;
    n = E();
    t = jj_consume_token(COMPR);
    nn = E();
          res.addChildren(n);
          res.addChildren(nn);
          res.setOperator(t.image);
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public FOR for_statment() throws ParseException {
 FOR res =new FOR();
 Token t;
 Node n1,n2,n4=null,tmp;
 BlockNode n3=new BlockNode();
    jj_consume_token(FOR);
    t = jj_consume_token(ID);
    jj_consume_token(COLON);
    n1 = E();
    jj_consume_token(LOOP);
    n2 = E();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      n4 = E();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      tmp = statment();
                                                                                 n3.addChildren(tmp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case READ:
      case WRITE:
      case IF:
      case FOR:
      case FUNC:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(END);
    res.addChildren(n1);
    res.addChildren(n2);
    res.addChildren(n3);
    if(n4!=null)
        res.addChildren(n4);
    res.setVarName(t.image);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public Read read() throws ParseException {
Read res= new Read();
Token t;
    jj_consume_token(READ);
    t = jj_consume_token(ID);
    jj_consume_token(SIMCOL);
        res.setVar(t.image);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public Write write() throws ParseException {
 Write res = new Write(android_context);
 Node e;
    jj_consume_token(WRITE);
    e = E();
    jj_consume_token(SIMCOL);
    res.addChildren(e);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public whileNode whil() throws ParseException {
whileNode res=new whileNode();
condationNode c=new condationNode();
BlockNode b=new BlockNode();
Node t;
    jj_consume_token(WHILE);
    jj_consume_token(LP);
    c = condation();
                                  res.addChildren(c);
    jj_consume_token(RP);
    label_5:
    while (true) {
      t = statment();
                                                                                b.addChildren(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case READ:
      case WRITE:
      case IF:
      case FOR:
      case FUNC:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(END);
     res.addChildren(b);
     {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public Node statment() throws ParseException {
   Node t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      t = whil();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_2(2)) {
        t = assign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          t = if_statment();
          break;
        case FOR:
          t = for_statment();
          break;
        case READ:
          t = read();
          break;
        case WRITE:
          t = write();
          break;
        case FUNC:
          function();
          break;
        case DEF:
          t = diffineVar();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if (t == null)
          t = new BlockNode();
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void function() throws ParseException {
 FunctionNode res=new FunctionNode();
 BlockNode b=new BlockNode();
 Node tmp;
 Token name,t=null;
    jj_consume_token(FUNC);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                           res.getParams().add(t.image);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMA);
        t = jj_consume_token(ID);
                         res.getParams().add(t.image);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    jj_consume_token(READ);
    name = jj_consume_token(ID);
    jj_consume_token(COLON);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case READ:
      case WRITE:
      case IF:
      case FOR:
      case FUNC:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      tmp = statment();
                          b.addChildren(tmp);
    }
    jj_consume_token(END);
          res.setName(name.image);
          res.setRoot(b);
          functionTabel.put(name.image,res);
  }

  static final public FunctionCall prototibe() throws ParseException {
  FunctionCall res=new FunctionCall();
  Node tmp=null;
  Token t;
    t = jj_consume_token(ID);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case LP:
    case COUT:
    case ID:
      tmp = E();
                         res.addChildren(tmp);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMA);
        tmp = E();
                                                             res.addChildren(tmp);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    res.setFunctionName(t.image);
    res.setFunctions(functionTabel);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AINLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x52a80000,0x20,0x40,0x30000,0x400000,0x52a80000,0x52a80000,0x4000000,0x8000,0x0,0x52a80000,0x52a80000,0x0,0x52a80000,0x0,0x0,0x52a80000,0x0,0x430000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x42,0x0,0x0,0x0,0x40,0x42,0x42,0x0,0x0,0x4,0x42,0x42,0x2,0x0,0x10,0x40,0x42,0x10,0x40,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AINL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AINL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AINLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AINL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AINLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AINL(AINLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AINLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
